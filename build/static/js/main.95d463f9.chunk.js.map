{"version":3,"sources":["Card.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","cardColor","this","card","flipped","color","onClick","style","backgroundColor","border","Component","Timer","currentTime","possibleCards","matched","shuffleCards","_","cloneDeep","shuffle","flipCard","cardId","cards","setCards","timerOn","setTimerOn","canClick","setCanClick","setVictory","previousCard","find","every","setTimeout","VictoryTime","time","App","useState","victory","setCurrentTime","timer","setTimer","useEffect","setInterval","clearInterval","className","resetBoard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95d463f9.chunk.js","sourcesContent":["import React, { Component } from 'react'; \n\nclass Card extends Component {\n\tconstructor (props) {\n\t\tsuper (props); // props include \n\t}\n\trender () {\n\t\tlet cardColor = 'black';\n\t\tif(this.props.card.flipped)\n\t\t{\n\t\t\tcardColor = this.props.card.color;\n\t\t}\n\t\treturn (\n\t\t\t<td onClick={this.props.onClick} style ={{backgroundColor: cardColor, border: 'solid 1px white' }}></td>\n\t\t\t);\n\t}\n}\n\n\nexport default Card; \n","import React, { useState, useEffect} from 'react';\n\n\nfunction Timer (props){\n  return (\n    <div>\n      <div> {props.currentTime}s </div>\n    </div>\n  )\n}\n\nexport default Timer; \n\n\n","import React from 'react';\nimport Card from './Card';\nimport Timer from'./Timer';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport _ from 'lodash'; //lodash library gives you many useful commands\n\nconst possibleCards = //object of possible cards\n[\n  { color : 'red', flipped: false, matched:false},\n  { color : 'red', flipped: false, matched:false},\n  { color : 'yellow', flipped: false, matched:false },\n  { color : 'yellow', flipped: false, matched:false },\n  { color : 'blue', flipped: false, matched:false },\n  { color : 'blue', flipped: false, matched:false },\n  { color : 'green', flipped: false, matched:false },\n  { color : 'green', flipped: false, matched:false },\n  { color : 'orange', flipped: false, matched:false },\n  { color : 'orange', flipped: false, matched:false }\n]\n\nfunction resetBoard(setCards, setTimerOn) //stops timer and shuffles deck\n{\n  setCards(shuffleCards());\n  setTimerOn(false);\n}\n\nfunction shuffleCards() //shuffles deck\n{\n  return _.cloneDeep(_.shuffle(possibleCards)); //clones the object so original remains in tact\n}\n\nfunction flipCard(cardId, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)\n{\n  if(!canClick) //makes it so users can't click on cards when cards are already flipped\n  {\n    return;\n  }\n  if(timerOn === false) //starts the timer if timer is not on\n  {\n    setTimerOn(true);\n  }\n  let previousCard = _.find(cards, {flipped:true, matched:false}); //finds card that is flipped and unmatched\n  if(!previousCard) //if no card is flipped\n  {\n    cards[cardId].flipped = true; //flip first card\n    previousCard = cards[cardId]; \n    setCards([...cards]); //setState\n  }\n  else //if flip card is found\n  {\n    cards[cardId].flipped = true; //flip second card\n    if(cards[cardId].color === previousCard.color) //if they have the same color set match to true\n    {\n      cards[cardId].matched = true; \n      previousCard.matched = true;\n      setCards([...cards]);\n      if(_.every(cards, {matched:true})) //if all cards are matched\n      {\n        setVictory(currentTime); //set highscore\n        setTimerOn(false); //stop timer\n      }\n    }\n    else //wait then set match to false\n    {\n      setCanClick(false); //make it so users can't click until timer is over\n      setCards([...cards]);\n      setTimeout(() => {\n        setCanClick(true); //make it so users can click again\n        cards[cardId].flipped = false; //unflip\n        previousCard.flipped = false;\n        setCards([...cards]);\n      }, 1000);\n    }\n  }\n}\n\nfunction VictoryTime(props) //mini component that displays the high score\n{\n  if(props.time !== 0 )\n  {\n    return(\n      <p> your most recent score is {props.time} seconds!</p>\n    );\n  }\n  else\n  {\n    return(\n      <p></p>\n    )\n  }\n}\n\nfunction App() {\n  const[cards, setCards] = useState(shuffleCards()); //The deck of cards and it's values\n  const[victory, setVictory] = useState(0);  // High score time\n  const[timerOn, setTimerOn] = useState(false); // timer on/off\n  const[canClick, setCanClick] = useState(true); // can interact with board on/off\n  const [currentTime, setCurrentTime] = useState(0); // timer value\n  const [timer, setTimer] = useState(null);// timer display\n  useEffect(() => {    //Israel's code\n    if (timerOn && !timer) \n    {\n      setTimer( setInterval(() => {\n        setCurrentTime(currentTime => currentTime + 1);\n      }, 1000));\n    } \n    else if (!timerOn && currentTime !== 0) \n    {\n      clearInterval(timer);\n      setCurrentTime(0);\n      setTimer(null);\n    }\n  });\n  return ( //JSX below\n    <div className=\"App\">\n      <Timer currentTime = {currentTime}/> \n      <table>\n        <tr>\n          <Card card = {cards[0]} onClick={() => flipCard(0, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/> \n          <Card card = {cards[1]} onClick={() => flipCard(1, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[2]} onClick={() => flipCard(2, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[3]} onClick={() => flipCard(3, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[4]} onClick={() => flipCard(4, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n        </tr>\n        <tr>\n          <Card card = {cards[5]} onClick={() => flipCard(5, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[6]} onClick={() => flipCard(6, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[7]} onClick={() => flipCard(7, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[8]} onClick={() => flipCard(8, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/>\n          <Card card = {cards[9]} onClick={() => flipCard(9, cards, setCards, timerOn, setTimerOn, canClick, setCanClick, currentTime, setVictory)}/> \n        </tr>\n      </table>\n      <button onClick={() => resetBoard(setCards, setTimerOn)}> Reset </button> \n      <VictoryTime time = {victory}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}